{"version":3,"sources":["components/PageTitle/index.js","views/App/Workers/index.js"],"names":["PageTitle","navigate","useNavigate","menuItem","useGetMenuItem","breadcrumbs","sx","mb","variant","title","role","separator","underline","color","onClick","cursor","AdminPageTitle","location","useLocation","useGetAdminMenuItem","baseRoute","url","isBaseRoute","pathname","middleLink","children","find","item","path","name","lastLink","DataGridDemo","dispatch","useDispatch","barbers","useSelector","state","BARBERS","useState","split","value","setValue","console","log","useEffect","type","GET_BARBERS","status","restrictedContent","style","height","data","length","minHeight","maxHeight","width","rows","columns","pageSize","rowsPerPageOptions","disableSelectionOnClick","to","fallback","id","borderBottom","borderColor","onChange","event","newValue","LinkTab","label","props","component","textTransform","mr","preventDefault","field","headerName","renderCell","params","minWidth","flex"],"mappings":"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","file":"static/js/23.4dd111b6.chunk.js","sourcesContent":["import React from 'react'\nimport { useNavigate, useLocation } from 'react-router-dom'\n\n// Hooks\nimport useGetMenuItem, { useGetAdminMenuItem } from '../../hooks/useGetMenuItem'\n\n// MUI\nimport { Typography, Breadcrumbs, Link, Box } from '@mui/material'\n\n\nexport default function PageTitle(){\n\n    // Hooks\n    const navigate = useNavigate()\n    const menuItem = useGetMenuItem()\n\n    if(!menuItem.breadcrumbs){\n        return null;\n    }\n\n    return(\n        <Box sx={{ mb: 4 }}>\n            <Typography sx={{ mb: 0.5 }} variant=\"h5\">\n                { menuItem.title }\n            </Typography>\n\n            <div role=\"presentation\">\n                <Breadcrumbs separator=\">\" aria-label=\"breadcrumb\">\n\n                    {/* Base route */}\n                    <Link \n                        underline=\"hover\" \n                        color=\"inherit\" \n                        onClick={() => navigate('/dashboard')}\n                        sx={{ cursor: 'pointer' }}\n                    >\n                        Dashboard\n                    </Link>\n\n                    {/* Current route */}\n                    <Typography color=\"text.primary\">\n                        { menuItem.title }\n                    </Typography>\n                </Breadcrumbs>\n            </div>\n        </Box>\n    )\n}\n\nfunction AdminPageTitle(){\n\n    // Hooks\n    const navigate = useNavigate()\n    const location = useLocation()\n    const menuItem = useGetAdminMenuItem()\n\n    if(!menuItem.breadcrumbs){\n        return null;\n    }\n\n    // Variables\n    const baseRoute = `/${menuItem.url}`\n    const isBaseRoute = location.pathname === baseRoute\n    const middleLink = menuItem.children.find(item => item.path === '').name\n    const lastLink = \n        menuItem.children.find(item => location.pathname == `${baseRoute}/${item.path}`)?.name || \n        menuItem.children.find(item => item.path === '*').name\n\n    return(\n        <Box sx={{ mb: 4 }}>\n            <Typography sx={{ mb: 0.5 }} variant=\"h5\">\n                { menuItem.title }\n            </Typography>\n\n            <div role=\"presentation\">\n                <Breadcrumbs separator=\">\" aria-label=\"breadcrumb\">\n\n                    {/* Base route */}\n                    <Link \n                        underline=\"hover\" \n                        color=\"inherit\" \n                        onClick={() => navigate('/admin/dashboard')}\n                        sx={{ cursor: 'pointer' }}\n                    >\n                        Dashboard\n                    </Link>\n\n                    {/* Current route */}\n                    {\n                        isBaseRoute ?\n                            <Typography>\n                                { middleLink }\n                            </Typography>\n                            :\n                            <Link \n                                underline=\"hover\" \n                                color=\"inherit\" \n                                onClick={() => navigate(baseRoute)}\n                                sx={{ cursor: 'pointer' }}\n                            >\n                                { middleLink }\n                            </Link>\n                    }\n                    \n\n                    {/* Current route */}\n                    {\n                        !isBaseRoute &&\n                            <Typography color=\"text.primary\">\n                                { lastLink }\n                            </Typography>\n                    }\n                </Breadcrumbs>\n            </div>\n        </Box>\n    )\n}\n\nexport { AdminPageTitle }","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { GET_BARBERS } from '../../../state/modules/barbers/actions';\n\n// React router\nimport { Outlet, useLocation, useNavigate } from \"react-router-dom\";\n\n// Permissions\nimport { Restricted } from '../../../auth/permissions'\n\n// MUI\nimport { DataGrid } from '@mui/x-data-grid';\nimport { Avatar, CircularProgress, Tabs, Tab, Box  } from '@mui/material'\n\n// Components\nimport PageTitle from '../../../components/PageTitle'\n\n\nexport default function DataGridDemo() {\n\n  // Variables\n  const dispatch = useDispatch()\n  const barbers = useSelector(state => state.BARBERS.barbers)\n  const location = useLocation()\n  const [value, setValue] = useState(location.pathname.split('/')[2]);\n\n  console.log(\"Value => \", value)\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  useEffect(() => {\n      setValue(location.pathname.split('/')[2])\n  }, [location])\n\n  // Methods\n  useEffect(() => {\n      dispatch({ type: GET_BARBERS })\n  },[])\n\n  if(barbers.status === 'loading'){\n      return <CircularProgress />\n  }\n\n  const restrictedContent =\n    <>\n      <PageTitle />\n      <div \n        style={{ \n          height: `calc(${barbers.data.length + 2} * 52px + 8px)`, \n          minHeight: 180, \n          maxHeight: 580, \n          width: '100%' \n        }}\n      >\n        <DataGrid\n            rows={barbers.data}\n            columns={columns}\n            pageSize={9}\n            rowsPerPageOptions={[9]}\n            // checkboxSelection\n            disableSelectionOnClick\n        />\n      </div> \n    </>\n    \n\n  return (\n    <Restricted to=\"view_client\" fallback={restrictedContent}>\n      <PageTitle />     \n        <div id=\"profile-tabs\">\n            {/* Tabs */}\n            <Box sx={{ width: '100%', mb: 4 }}>\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n                    <Tabs \n                        value={value} \n                        onChange={handleChange} \n                        aria-label=\"basic tabs example\"\n                    >\n                        <LinkTab label=\"Frizeri\" value=\"workers\" />\n                        <LinkTab label=\"Klijenti\" value=\"clients\" />\n                    </Tabs>\n                </Box>\n            </Box>\n\n            {/* Rendering routes */}\n            <Outlet />\n        </div>\n    </Restricted>\n  );\n}\n\nfunction LinkTab(props) {\n\n  // Variables\n  const navigate = useNavigate()\n\n  return (\n    <Tab\n      component=\"a\"\n      sx={{ \n          textTransform: \"none\", \n          mr: 2 \n      }}\n      onClick={(event) => {\n        event.preventDefault();\n        navigate(`/users/${props.value}`)\n      }}\n      {...props}\n    />\n  );\n}\n\n\nconst columns = [\n    { field: 'id', headerName: 'ID', width: 40 },\n    { \n      field: 'avatar', \n      headerName: 'Fotografija', \n      width: 120 ,\n      renderCell: (params) => (\n          <Avatar\n            sx={{ \n              width: '36px !important', \n              height: '36px !important' \n            }} \n          />\n      ),\n    },\n    {\n      field: 'name',\n      headerName: 'Ime radnika',\n      minWidth: 160,\n      flex: 1,\n    },\n    {\n      field: 'email',\n      headerName: 'E-mail adresa',\n      minWidth: 160,\n      flex: 1,\n    },\n    {\n      field: 'phone_number',\n      headerName: 'Broj telefona',\n      minWidth: 160,\n      flex: 1,\n    }\n];"],"sourceRoot":""}