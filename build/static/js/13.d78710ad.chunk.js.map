{"version":3,"sources":["form-components/Input.js","constants/index.js","views/Auth/Login/index.js"],"names":["FormInputText","name","control","label","type","textFieldProps","useState","passwordVisible","setPasswordVisible","togglePasswordVisibility","previousState","handleMouseDownPassword","event","preventDefault","render","field","onChange","value","error","fieldState","formState","helperText","message","fullWidth","variant","InputProps","endAdornment","position","onClick","onMouseDown","edge","FORM_VALIDATIONS","required","email","SNACKBAR_ALERTS","login_error","register_error","Login","auth","useAuth","navigate","useNavigate","location","useLocation","currentUser","useSelector","state","USER","user","isAuthenticated","isAdmin","hash","adminPrompt","setAdminPrompt","snackbarOpened","setSnackbarOpened","localStorage","getItem","password","defaultValues","methods","useForm","mode","handleSubmit","register","getValues","closeSnackbar","openSnackbar","a","replace","setItem","onPrompt","selection","direction","spacing","sx","maxWidth","width","mb","opacity","fontWeight","inputMode","pattern","ml","cursor","status","loading","loadingPosition","startIcon","height","textTransform","console","log","login","onUserCallback","onAdminCallback","disabled","isValid","open","autoHideDuration","onClose","severity"],"mappings":"+PAUe,SAASA,EAAT,GAAkF,IAAxDC,EAAuD,EAAvDA,KAAMC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,MAAwC,IAAjCC,YAAiC,MAA1B,OAA0B,EAAlBC,EAAkB,EAAlBA,eAG5E,EAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAGA,SAASC,IACPD,GAAmB,SAAAE,GAAa,OAAKA,KAGvC,SAASC,EAAwBC,GAC/BA,EAAMC,iBAGR,OACE,cAAC,IAAD,CACEZ,KAAMA,EACNC,QAASA,EACTY,OAAQ,oBACNC,MAASC,EADH,EACGA,SAAUC,EADb,EACaA,MACLC,EAFR,EAENC,WAAcD,MAFR,EAGNE,UAHM,OAKN,cAAC,IAAD,aACEC,WAAYH,EAAQA,EAAMI,QAAU,KACpCJ,QAASA,EACTF,SAAUA,EACVC,MAAOA,EACPM,WAAS,EACTpB,MAAOA,EACPqB,QAAQ,WACRpB,KAAMG,EAAkB,OAASH,EACjCqB,WAAY,CACVC,aAAuB,aAATtB,GACd,cAAC,IAAD,CAAgBuB,SAAS,MAAzB,SACE,cAAC,IAAD,CACE,aAAW,6BACXC,QAASnB,EACToB,YAAalB,EACbmB,KAAK,MAJP,SAOIvB,EACE,cAAC,IAAD,IACA,cAAC,IAAD,UAKNF,S,iCC3Dd,oEAAO,IAAM0B,EAAmB,CAC5BC,SAAU,CACNf,OAAO,EACPK,QAAS,0BAEbW,MAAO,CACHhB,MAAO,2CACPK,QAAS,4BAIJY,EAAkB,CAC3BC,YAAa,2CACbC,eAAgB,2D,iSCEL,SAASC,IAGpB,IAAMC,EAAOC,cACPC,EAAWC,cACXC,EAAWC,cAGXC,EAAcC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,QACpD,EAAsC1C,mBAASgC,EAAKW,iBAAmBX,EAAKY,SAA6B,YAAlBR,EAASS,MAAhG,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA4C/C,oBAAS,GAArD,mBAAOgD,EAAP,KAAuBC,EAAvB,KACA,EAAwBjD,mBAAS,CAC7B2B,MAAOuB,aAAaC,QAAQ,iBAC5BC,SAAU,KAFPC,EAAP,oBAIMC,EAAUC,YAAQ,CAAEF,gBAAeG,KAAM,aACvCC,EAA0DH,EAA1DG,aAAcC,EAA4CJ,EAA5CI,SAAU9D,EAAkC0D,EAAlC1D,QAASkB,EAAyBwC,EAAzBxC,UAAyBwC,EAAdK,UAOpD,SAASC,IACLX,GAAkB,GAGtB,SAASY,IACLZ,GAAkB,GA5BK,4CA+B3B,WAA8BtB,GAA9B,SAAAmC,EAAA,6DACI5B,EAAS,aAAc,CAAE6B,SAAS,IADtC,SAEUb,aAAac,QAAQ,gBAAiBrC,GAFhD,4CA/B2B,kEAoC3B,WAA+BA,GAA/B,SAAAmC,EAAA,6DAEIf,GAAe,GAFnB,SAGUG,aAAac,QAAQ,gBAAiBrC,GAHhD,4CApC2B,sBA0C3B,SAASsC,EAASC,GACG,QAAdA,EACChC,EAAS,cAES,UAAdgC,GACJhC,EAAS,oBAejB,OACI,mCAESY,EAwFG,eAAC,IAAD,CAAOqB,UAAU,MAAMC,QAAS,EAAhC,UACI,cAAC,IAAD,CAAQ9C,QAAS,kBAAM2C,EAAS,QAAhC,iBACA,cAAC,IAAD,CAAQ3C,QAAS,kBAAM2C,EAAS,UAAhC,4BAzFJ,eAAC,IAAD,CAAOG,QAAS,EAAGC,GAAI,CAAEC,SAAU,IAAKC,MAAO,QAA/C,UAEI,eAAC,IAAD,WACI,cAAC,IAAD,CAAYrD,QAAQ,KAAKmD,GAAI,CAAEG,GAAI,GAAnC,8CAGA,cAAC,IAAD,CAAYtD,QAAQ,YAAYmD,GAAI,CAAEI,QAAS,GAAIC,WAAY,KAA/D,6CAOJ,eAAC,IAAD,CAAOL,GAAI,CAAEE,MAAO,QAAUH,QAAS,EAAvC,UAEI,cAAC,IAAD,aACIzE,KAAK,QACL+B,UAAQ,EACR9B,QAASA,EACTC,MAAM,gBACN8E,UAAU,QACV7E,KAAK,SACD4D,EAAS,QAAS,CAClBhC,SAAUD,IAAiBC,SAC3BkD,QAASnD,IAAiBE,UAIlC,cAAC,IAAD,aACIhC,KAAK,WACL+B,UAAQ,EACR9B,QAASA,EACTC,MAAM,UACNC,KAAK,YACD4D,EAAS,WAAY,CACrBhC,SAAUD,IAAiBC,gBAKvC,eAAC,IAAD,gCAEI,cAAC,IAAD,CACIJ,QA1F5B,WACIY,EAAS,mBA0FemC,GAAI,CAAEQ,GAAI,EAAGC,OAAQ,WAFzB,4BASuB,YAAvBxC,EAAYyC,OACR,cAAC,IAAD,CACIC,SAAO,EACPC,gBAAgB,QAChBC,UAAW,cAAC,IAAD,IACXhE,QAAQ,WACRmD,GAAI,CAAEc,OAAQ,GAAIC,cAAe,QALrC,+BAUA,cAAC,IAAD,CACI9D,QAASmC,GA9EzC,SAAkBf,GACd2C,QAAQC,IAAI5C,GACZV,EAAKuD,MACD7C,GACA,kBAvDmB,2CAuDb8C,CAAe9C,EAAKf,UAC1B,kBAxDmB,2CAwDb8D,CAAgB/C,EAAKf,SAC3BkC,MAyEwBQ,GAAI,CAAEc,OAAQ,GAAIC,cAAe,QACjClE,QAAQ,YACRD,WAAS,EACT0D,UAAU,SACVe,UAAW5E,EAAU6E,QANzB,SAQM7E,EAAU6E,QAAU,UAAY,oBAI9C,cAAC,IAAD,CACIC,KAAM5C,EACN6C,iBAAkB,IAClBC,QAASlC,EACT5C,QAASY,IAAgBC,YAJ7B,SAMI,cAAC,IAAD,CAAOiE,QAASlC,EAAemC,SAAS,QAAQ1B,GAAI,CAAEE,MAAO,QAA7D,SACM3C,IAAgBC","file":"static/js/13.d78710ad.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Controller } from \"react-hook-form\";\n\n// MUI\nimport { TextField, InputAdornment, IconButton } from \"@mui/material\";\n\n// Icons\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\n\nexport default function FormInputText ({ name, control, label, type = \"text\", textFieldProps }) {\n\n  // Variables\n  const [passwordVisible, setPasswordVisible] = useState(false)\n\n  // Methods\n  function togglePasswordVisibility() {\n    setPasswordVisible(previousState => !previousState)\n  }\n\n  function handleMouseDownPassword(event){\n    event.preventDefault();\n  };\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({\n        field: { onChange, value },\n        fieldState: { error },\n        formState,\n      }) => (\n        <TextField\n          helperText={error ? error.message : null}\n          error={!!error}\n          onChange={onChange}\n          value={value}\n          fullWidth\n          label={label}\n          variant=\"outlined\"\n          type={passwordVisible ? 'text' : type}\n          InputProps={{\n            endAdornment: type === 'password' &&\n            <InputAdornment position=\"end\">\n              <IconButton\n                aria-label=\"Toggle password visibility\"\n                onClick={togglePasswordVisibility}\n                onMouseDown={handleMouseDownPassword}\n                edge=\"end\"\n              >\n                {\n                  passwordVisible ? \n                    <VisibilityOff /> : \n                    <Visibility />\n                }\n              </IconButton>\n            </InputAdornment>\n          }}\n          {...textFieldProps}\n        />\n      )}\n    />\n  );\n};","export const FORM_VALIDATIONS = {\n    required: {\n        value: true,\n        message: 'This field is required'\n    },\n    email: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n        message: \"Invalid e-mail address.\"\n    }\n}\n\nexport const SNACKBAR_ALERTS = {\n    login_error: 'Dogodila se greška prilikom prijave',\n    register_error: 'Dogodila se greška prilikom stvaranja računa'\n}","import React, { useState } from 'react'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { useAuth } from '../../../auth'\nimport { useSelector } from 'react-redux'\n\n// MUI\nimport { Stack, Box, Typography, Divider, Button, Link, Snackbar, Alert } from '@mui/material'\nimport { LoadingButton } from '@mui/lab';\nimport SaveIcon from '@mui/icons-material/Save';\nimport Input from '../../../form-components/Input'\n\n// Form\nimport { useForm } from \"react-hook-form\";\nimport { FORM_VALIDATIONS, SNACKBAR_ALERTS } from '../../../constants'\n\nexport default function Login(){\n\n    // Hooks\n    const auth = useAuth()\n    const navigate = useNavigate()\n    const location = useLocation()\n\n    // Variables\n    const currentUser = useSelector(state => state.USER.user)\n    const [adminPrompt, setAdminPrompt] = useState(auth.isAuthenticated && auth.isAdmin && location.hash === '#prompt')\n    const [snackbarOpened, setSnackbarOpened] = useState(false)\n    const [defaultValues] = useState({\n        email: localStorage.getItem('bb:last-email'),\n        password: \"\",\n    })\n    const methods = useForm({ defaultValues, mode: 'onChange' }); // Rerendering on change - live validation\n    const { handleSubmit, register, control, formState, getValues } = methods;\n\n    // Methods\n    function handleNavigate() {\n        navigate('/auth/register')\n    }\n\n    function closeSnackbar(){\n        setSnackbarOpened(false)\n    }\n\n    function openSnackbar(){\n        setSnackbarOpened(true)\n    }\n\n    async function onUserCallback(email){\n        navigate('/dashboard', { replace: true })\n        await localStorage.setItem('bb:last-email', email)\n    }\n\n    async function onAdminCallback(email){\n        // navigate(`${location.pathname}#prompt`)\n        setAdminPrompt(true)\n        await localStorage.setItem('bb:last-email', email)\n    }\n\n    function onPrompt(selection){\n        if(selection === 'app'){\n            navigate('/dashboard')\n        }\n        else if(selection === 'admin'){\n            navigate('/admin/dashboard')\n        }\n    }\n\n    function onSubmit(user) {\n        console.log(user)\n        auth.login(\n            user, \n            () => onUserCallback(user.email),\n            () => onAdminCallback(user.email), \n            openSnackbar\n        )\n    }\n\n\n    return(\n        <>\n            {\n                !adminPrompt ?\n                    <Stack spacing={6} sx={{ maxWidth: 480, width: '100%' }}>\n                        {/* Title */}\n                        <Box>\n                            <Typography variant=\"h4\" sx={{ mb: 1 }}>\n                                Dobrodošli u Barber Booking\n                            </Typography>\n                            <Typography variant=\"subtitle2\" sx={{ opacity: .8, fontWeight: 400 }}>\n                                Prijavite se da bi nastavili\n                            </Typography>\n                        </Box>\n\n                        {/* <Divider /> */}\n\n                        <Stack sx={{ width: '100%' }} spacing={4}>\n\n                            <Input \n                                name=\"email\"\n                                required \n                                control={control} \n                                label=\"E-mail adresa\"\n                                inputMode=\"email\"\n                                type=\"email\"\n                                {...register(\"email\", { \n                                    required: FORM_VALIDATIONS.required, \n                                    pattern: FORM_VALIDATIONS.email\n                                })}\n                            />\n\n                            <Input \n                                name=\"password\" \n                                required\n                                control={control} \n                                label=\"Lozinka\"\n                                type=\"password\"\n                                {...register(\"password\", { \n                                    required: FORM_VALIDATIONS.required\n                                })}\n                            />\n                        </Stack>\n\n                        <Divider>\n                            Nemate račun?\n                            <Link \n                                onClick={handleNavigate} \n                                sx={{ ml: 1, cursor: 'pointer' }}\n                            >\n                                Stvorite ga\n                            </Link>\n                        </Divider>\n\n                        {\n                            currentUser.status === 'loading' ?\n                                <LoadingButton\n                                    loading\n                                    loadingPosition=\"start\"\n                                    startIcon={<SaveIcon />}\n                                    variant=\"outlined\"\n                                    sx={{ height: 54, textTransform: 'none' }} \n                                >\n                                    Prijavljivanje...\n                                </LoadingButton>\n                                :\n                                <Button\n                                    onClick={handleSubmit(onSubmit)}\n                                    sx={{ height: 54, textTransform: 'none' }} \n                                    variant=\"contained\" \n                                    fullWidth\n                                    inputMode=\"submit\"\n                                    disabled={!formState.isValid}\n                                >\n                                    { formState.isValid ? 'Prijava' : 'Unesite podatke' }\n                                </Button>\n                        }\n\n                        <Snackbar\n                            open={snackbarOpened}\n                            autoHideDuration={3000}\n                            onClose={closeSnackbar}\n                            message={SNACKBAR_ALERTS.login_error}\n                        >\n                            <Alert onClose={closeSnackbar} severity=\"error\" sx={{ width: '100%' }}>\n                                { SNACKBAR_ALERTS.login_error }\n                            </Alert>\n                        </Snackbar>\n                        \n                    </Stack>\n                    :\n                    <Stack direction=\"row\" spacing={4}>\n                        <Button onClick={() => onPrompt('app')}>App</Button>\n                        <Button onClick={() => onPrompt('admin')}>Admin panel</Button>\n                    </Stack>\n            }\n        </>\n    )\n}"],"sourceRoot":""}