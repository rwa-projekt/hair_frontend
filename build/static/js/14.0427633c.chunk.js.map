{"version":3,"sources":["form-components/Input.js","constants/index.js","views/Auth/Register/index.js"],"names":["FormInputText","name","control","label","type","textFieldProps","useState","passwordVisible","setPasswordVisible","togglePasswordVisibility","previousState","handleMouseDownPassword","event","preventDefault","render","field","onChange","value","error","fieldState","formState","helperText","message","fullWidth","variant","InputProps","endAdornment","position","onClick","onMouseDown","edge","FORM_VALIDATIONS","required","email","SNACKBAR_ALERTS","login_error","register_error","Login","auth","useAuth","navigate","useNavigate","snackbarOpened","setSnackbarOpened","password","defaultValues","registerStatus","useSelector","state","USER","register","status","methods","useForm","mode","handleSubmit","closeSnackbar","openSnackbar","onSubmitCallback","replace","spacing","sx","maxWidth","width","mb","opacity","fontWeight","inputMode","pattern","autoComplete","ml","cursor","loading","loadingPosition","startIcon","height","textTransform","user","console","log","disabled","isValid","open","autoHideDuration","onClose","severity","style","minHeight"],"mappings":"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","file":"static/js/14.0427633c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Controller } from \"react-hook-form\";\n\n// MUI\nimport { TextField, InputAdornment, IconButton } from \"@mui/material\";\n\n// Icons\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\n\nexport default function FormInputText ({ name, control, label, type = \"text\", textFieldProps }) {\n\n  // Variables\n  const [passwordVisible, setPasswordVisible] = useState(false)\n\n  // Methods\n  function togglePasswordVisibility() {\n    setPasswordVisible(previousState => !previousState)\n  }\n\n  function handleMouseDownPassword(event){\n    event.preventDefault();\n  };\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({\n        field: { onChange, value },\n        fieldState: { error },\n        formState,\n      }) => (\n        <TextField\n          helperText={error ? error.message : null}\n          error={!!error}\n          onChange={onChange}\n          value={value}\n          fullWidth\n          label={label}\n          variant=\"outlined\"\n          type={passwordVisible ? 'text' : type}\n          InputProps={{\n            endAdornment: type === 'password' &&\n            <InputAdornment position=\"end\">\n              <IconButton\n                aria-label=\"Toggle password visibility\"\n                onClick={togglePasswordVisibility}\n                onMouseDown={handleMouseDownPassword}\n                edge=\"end\"\n              >\n                {\n                  passwordVisible ? \n                    <VisibilityOff /> : \n                    <Visibility />\n                }\n              </IconButton>\n            </InputAdornment>\n          }}\n          {...textFieldProps}\n        />\n      )}\n    />\n  );\n};","export const FORM_VALIDATIONS = {\n    required: {\n        value: true,\n        message: 'This field is required'\n    },\n    email: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n        message: \"Invalid e-mail address.\"\n    }\n}\n\nexport const SNACKBAR_ALERTS = {\n    login_error: 'Dogodila se greška prilikom prijave',\n    register_error: 'Dogodila se greška prilikom stvaranja računa'\n}","import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useAuth } from '../../../auth'\nimport { useSelector } from 'react-redux'\n\n// MUI\nimport { Stack, Box, Typography, Divider, Button, Link, Snackbar, Alert } from '@mui/material'\nimport { LoadingButton } from '@mui/lab';\nimport SaveIcon from '@mui/icons-material/Save';\nimport Input from '../../../form-components/Input'\n\n// Form\nimport { useForm } from \"react-hook-form\";\nimport { FORM_VALIDATIONS, SNACKBAR_ALERTS } from '../../../constants'\n\nexport default function Login(){\n\n    // Hooks\n    const auth = useAuth()\n    const navigate = useNavigate()\n\n    // Variables\n    const [snackbarOpened, setSnackbarOpened] = useState(false)\n    const [defaultValues] = useState({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n    })\n    const registerStatus = useSelector(state => state.USER.register.status)\n    const methods = useForm({ defaultValues, mode: 'onChange' }); // Rerendering on change - live validation\n    const { handleSubmit, register, control, formState } = methods;\n\n    // Methods\n    function handleNavigate() {\n        navigate('/auth/login')\n    }\n\n    function closeSnackbar(){\n        setSnackbarOpened(false)\n    }\n\n    function openSnackbar(){\n        setSnackbarOpened(true)\n    }\n\n    function onSubmitCallback(){\n        let next = '/dashboard'\n        navigate(next, { replace: true })\n    }\n\n    function onSubmit(user) {\n        console.log(user)\n        auth.register(user, onSubmitCallback, openSnackbar)\n    }\n\n    return(\n        <Stack spacing={6} sx={{ maxWidth: 480, width: '100%' }}>\n            {/* Title */}\n            <Box>\n                <Typography variant=\"h4\" sx={{ mb: 1 }}>\n                    Dobrodošli u Barber Booking\n                </Typography>\n                <Typography variant=\"subtitle2\" sx={{ opacity: .8, fontWeight: 400 }}>\n                    Stvorite račun da biste nastavili\n                </Typography>\n            </Box>\n\n            {/* <Divider /> */}\n\n            <Stack spacing={4}>\n\n                <Input \n                    name=\"name\"\n                    required \n                    control={control} \n                    label=\"Ime i prezime\"\n                    inputMode=\"text\"\n                    type=\"text\"\n                    {...register(\"name\", { \n                        required: FORM_VALIDATIONS.required\n                    })}\n                />\n\n                <Input \n                    name=\"email\"\n                    required \n                    control={control} \n                    label=\"E-mail adresa\"\n                    inputMode=\"email\"\n                    type=\"email\"\n                    {...register(\"email\", { \n                        required: FORM_VALIDATIONS.required, \n                        pattern: FORM_VALIDATIONS.email\n                    })}\n                />\n\n                <Input \n                    name=\"password\" \n                    required\n                    control={control} \n                    label=\"Lozinka\"\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    {...register(\"password\", { \n                        required: FORM_VALIDATIONS.required\n                    })}\n                />\n            </Stack>\n\n            <Divider>\n                Već imate račun?\n                <Link \n                    onClick={handleNavigate} \n                    sx={{ ml: 1, cursor: 'pointer' }}\n                >\n                    Prijavite se\n                </Link>\n            </Divider>\n\n            {\n                registerStatus === 'loading' ?\n                    <LoadingButton\n                        loading\n                        loadingPosition=\"start\"\n                        startIcon={<SaveIcon />}\n                        variant=\"outlined\"\n                        sx={{ height: 54, textTransform: 'none' }} \n                    >\n                        Stvaranje računa...\n                    </LoadingButton>\n                    :\n                    <Button\n                        onClick={handleSubmit(onSubmit)}\n                        sx={{ height: 54, textTransform: 'none' }} \n                        variant=\"contained\" \n                        fullWidth\n                        inputMode=\"submit\"\n                        disabled={!formState.isValid}\n                    >\n                        { formState.isValid ? 'Stvorite račun' : 'Unesite podatke' }\n                    </Button>\n            }\n\n            <Snackbar\n                open={snackbarOpened}\n                autoHideDuration={3000}\n                onClose={closeSnackbar}\n                message={SNACKBAR_ALERTS.register_error}\n            >\n                <Alert onClose={closeSnackbar} severity=\"error\" sx={{ width: '100%' }}>\n                    { SNACKBAR_ALERTS.register_error }\n                </Alert>\n            </Snackbar>\n\n            <div style={{ minHeight: 0 }} /> {/* Padding bottom */}\n        </Stack>\n    )\n}"],"sourceRoot":""}